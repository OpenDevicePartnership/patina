[package]
name = "dxe_core"
resolver = "2"
version.workspace = true
repository.workspace = true
license.workspace = true
edition.workspace = true
publish.workspace = true
readme = "../README.md"
description = "A pure rust implementation of the UEFI DXE Core."

[lib]
name = "dxe_core"
path = "src/lib.rs"

# Metadata to tell docs.rs how to build the documentation when uploading
[package.metadata.docs.rs]
features = ["doc"]

[[example]]
name = "dxe_core_std"
path = "examples/std.rs"
required-features = ["std"]

[dependencies]
ahash = { workspace=  true }
crc32fast = { workspace = true }
goblin = {workspace = true}
lazy_static = { workspace = true }
linked_list_allocator = { workspace = true }
log = { workspace = true }
mu_pi = { workspace = true }
mu_rust_helpers = { workspace = true }
paging = { workspace = true }
r-efi = { workspace = true }
scroll = {workspace = true}
spin = { workspace = true }
uefi_corosensei = { workspace = true }
uuid = { workspace = true }

uefi_sdk = { workspace = true }
uefi_collections = { workspace = true }
uefi_component_interface = { workspace = true }
uefi_cpu = { workspace = true }
uefi_debugger = { workspace = true }
uefi_device_path = { workspace = true }
uefi_depex = { workspace = true}
uefi_performance = { workspace = true }

[dev-dependencies]
sample_components = { workspace = true }
section_extractor = { workspace = true }
uefi_collections = { workspace = true, default-features = true }
mockall = { workspace = true }

[target.'cfg(all(target_arch="aarch64"))'.dependencies]
arm-gic = { workspace = true }

[features]
default = []
std = ["uefi_sdk/std"]
doc = ["uefi_cpu/doc"]

[lints.rust]
unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tarpaulin_include)'] }
